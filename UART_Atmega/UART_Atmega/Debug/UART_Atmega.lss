
UART_Atmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d5  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056c  00000000  00000000  00000761  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000220  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f4  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <uart_emit>:
}
unsigned char uart_recieve (void)
{
	while(!(UCSRA) & (1<<RXC));           // wait while data is being received
	return UDR;                             // return 8-bit data
}
  6c:	5d 9b       	sbis	0x0b, 5	; 11
  6e:	fe cf       	rjmp	.-4      	; 0x6c <uart_emit>
  70:	8c b9       	out	0x0c, r24	; 12
  72:	08 95       	ret

00000074 <main>:
void main (void)
{
	unsigned char a;
	DDRA=0xff;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	8a bb       	out	0x1a, r24	; 26
	UBRRL=51;
  78:	83 e3       	ldi	r24, 0x33	; 51
  7a:	89 b9       	out	0x09, r24	; 9
	UCSRB|=(1<<TXEN)|(1<<RXEN)|(1<<RXCIE)|(1<<TXCIE);  //setting the proper values
  7c:	8a b1       	in	r24, 0x0a	; 10
  7e:	88 6d       	ori	r24, 0xD8	; 216
  80:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<UCSZ0)|(1<<UCSZ1);                     //data length is 8 bit.
  82:	80 b5       	in	r24, 0x20	; 32
  84:	86 60       	ori	r24, 0x06	; 6
  86:	80 bd       	out	0x20, r24	; 32
	while (!( UCSRA & (1<<UDRE)));            // wait while register is free
	UDR = data;                             // load data in the register
}
unsigned char uart_recieve (void)
{
	while(!(UCSRA) & (1<<RXC));           // wait while data is being received
  88:	8b b1       	in	r24, 0x0b	; 11
	return UDR;                             // return 8-bit data
  8a:	8c b1       	in	r24, 0x0c	; 12
	UCSRC|=(1<<UCSZ0)|(1<<UCSZ1);                     //data length is 8 bit.
	
	while(1)
	{
		a=uart_recieve();		//method to recieve the character
		if(a>48){
  8c:	81 33       	cpi	r24, 0x31	; 49
  8e:	e0 f3       	brcs	.-8      	; 0x88 <main+0x14>
			uart_emit(a);
  90:	0e 94 36 00 	call	0x6c	; 0x6c <uart_emit>
  94:	f9 cf       	rjmp	.-14     	; 0x88 <main+0x14>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
